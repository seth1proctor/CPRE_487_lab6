----------------------------------------------------------------------------------
-- AUTOGENERATED. See gen_conv_accelerator_tb.py
--
-- Gregory Ling, 2024
----------------------------------------------------------------------------------

library work;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity conv_accelerator_tb is
end conv_accelerator_tb;

architecture Behavioral of conv_accelerator_tb is

    constant DIM_WIDTH : integer := 12; -- Max dim size is 2048 in a dense layer
    constant INPUT_ADDR_WIDTH : integer := 7; -- Max input size is 60*60*32 < 2^17
    constant FILTER_ADDR_WIDTH : integer := 7; -- Max filter size is 5*5*32 < 2^10
    constant OUTPUT_ADDR_WIDTH : integer := 7; -- Max size of output channel is 60x60, 4 channels < 2^14
    constant INPUT_BRAM_ADDR_WIDTH : integer := 5; -- Word address width to the BRAM interfaces, must be kept in sync with ADDR_WIDTH, BRAM_DATA_WIDTH, and MAC_DATA_WIDTH!!!
    constant FILTER_BRAM_ADDR_WIDTH : integer := 5; -- Word address width to the BRAM interfaces, must be kept in sync with ADDR_WIDTH, BRAM_DATA_WIDTH, and MAC_DATA_WIDTH!!!
    constant OUTPUT_BRAM_ADDR_WIDTH : integer := 5; -- Word address width to the BRAM interfaces, must be kept in sync with ADDR_WIDTH, BRAM_DATA_WIDTH, and MAC_DATA_WIDTH!!!
    constant BRAM_DATA_WIDTH : integer := 32; -- Data width of raw BRAM interface
    constant MAC_DATA_WIDTH : integer := 8; -- Data width of each MAC input operand, defaults to int8. Supports sub-byte indexing, must be power of 2 and less than BRAM_DATA_WIDTH
    constant MAC_OUTPUT_DATA_WIDTH : integer := 32; -- Data width of the raw output of the MAC unit

    -- Configuration values from conv_config unit
    signal max_pooling : std_logic;
    signal relu : std_logic;
    signal filter_w : std_logic_vector(31 downto 0);
    signal filter_h : std_logic_vector(31 downto 0);
    signal filter_c : std_logic_vector(31 downto 0);
    signal output_w : std_logic_vector(31 downto 0);
    signal output_h : std_logic_vector(31 downto 0);
    signal input_end_diff_fw : std_logic_vector(31 downto 0);
    signal input_end_diff_fh : std_logic_vector(31 downto 0);
    signal input_end_diff_fc : std_logic_vector(31 downto 0);
    signal input_end_diff_ow : std_logic_vector(31 downto 0);
    signal output_elements_per_channel : std_logic_vector(31 downto 0);
    signal output_initial_offset : std_logic_vector(31 downto 0);
    signal mac0_bias : std_logic_vector(31 downto 0);
    signal mac1_bias : std_logic_vector(31 downto 0);
    signal mac2_bias : std_logic_vector(31 downto 0);
    signal mac3_bias : std_logic_vector(31 downto 0);
    signal q_scale : std_logic_vector(31 downto 0);
    signal q_zero : std_logic_vector(31 downto 0);

    -- BRAM blocks for high speed memory access
    signal BRAM_INPUT_addr : std_logic_vector(32-1 downto 0);
    signal BRAM_INPUT_din : std_logic_vector(BRAM_DATA_WIDTH-1 downto 0);
    signal BRAM_INPUT_dout : std_logic_vector(31 downto 0);
    signal BRAM_INPUT_dout_delay1 : std_logic_vector(31 downto 0);
    signal BRAM_INPUT_en : std_logic;
    signal BRAM_INPUT_we : std_logic_vector((BRAM_DATA_WIDTH/8)-1 downto 0);
    signal BRAM_INPUT_rst : std_logic;
    signal BRAM_INPUT_clk : std_logic;

    signal BRAM_FILTER0_addr : std_logic_vector(32-1 downto 0);
    signal BRAM_FILTER0_din : std_logic_vector(BRAM_DATA_WIDTH-1 downto 0);
    signal BRAM_FILTER0_dout : std_logic_vector(31 downto 0);
    signal BRAM_FILTER0_dout_delay1 : std_logic_vector(31 downto 0);
    signal BRAM_FILTER0_en : std_logic;
    signal BRAM_FILTER0_we : std_logic_vector((BRAM_DATA_WIDTH/8)-1 downto 0);
    signal BRAM_FILTER0_rst : std_logic;
    signal BRAM_FILTER0_clk : std_logic;

    signal BRAM_FILTER1_addr : std_logic_vector(32-1 downto 0);
    signal BRAM_FILTER1_din : std_logic_vector(BRAM_DATA_WIDTH-1 downto 0);
    signal BRAM_FILTER1_dout : std_logic_vector(31 downto 0);
    signal BRAM_FILTER1_dout_delay1 : std_logic_vector(31 downto 0);
    signal BRAM_FILTER1_en : std_logic;
    signal BRAM_FILTER1_we : std_logic_vector((BRAM_DATA_WIDTH/8)-1 downto 0);
    signal BRAM_FILTER1_rst : std_logic;
    signal BRAM_FILTER1_clk : std_logic;

    signal BRAM_FILTER2_addr : std_logic_vector(32-1 downto 0);
    signal BRAM_FILTER2_din : std_logic_vector(BRAM_DATA_WIDTH-1 downto 0);
    signal BRAM_FILTER2_dout : std_logic_vector(31 downto 0);
    signal BRAM_FILTER2_dout_delay1 : std_logic_vector(31 downto 0);
    signal BRAM_FILTER2_en : std_logic;
    signal BRAM_FILTER2_we : std_logic_vector((BRAM_DATA_WIDTH/8)-1 downto 0);
    signal BRAM_FILTER2_rst : std_logic;
    signal BRAM_FILTER2_clk : std_logic;

    signal BRAM_FILTER3_addr : std_logic_vector(32-1 downto 0);
    signal BRAM_FILTER3_din : std_logic_vector(BRAM_DATA_WIDTH-1 downto 0);
    signal BRAM_FILTER3_dout : std_logic_vector(31 downto 0);
    signal BRAM_FILTER3_dout_delay1 : std_logic_vector(31 downto 0);
    signal BRAM_FILTER3_en : std_logic;
    signal BRAM_FILTER3_we : std_logic_vector((BRAM_DATA_WIDTH/8)-1 downto 0);
    signal BRAM_FILTER3_rst : std_logic;
    signal BRAM_FILTER3_clk : std_logic;

    signal BRAM_OUTPUT_addr : std_logic_vector(32-1 downto 0);
    signal EXPECTED_BRAM_OUTPUT_addr : std_logic_vector(32-1 downto 0);
    signal BRAM_OUTPUT_din : std_logic_vector(BRAM_DATA_WIDTH-1 downto 0);
    signal EXPECTED_BRAM_OUTPUT_din : std_logic_vector(BRAM_DATA_WIDTH-1 downto 0);
    signal BRAM_OUTPUT_dout : std_logic_vector(31 downto 0);
    signal BRAM_OUTPUT_dout_delay1 : std_logic_vector(31 downto 0);
    signal BRAM_OUTPUT_en : std_logic;
    signal BRAM_OUTPUT_we : std_logic_vector((BRAM_DATA_WIDTH/8)-1 downto 0);
    signal BRAM_OUTPUT_rst : std_logic;
    signal BRAM_OUTPUT_clk : std_logic;
    signal BRAM_OUTPUT_fail : std_logic := '0';

    signal BRAM_INPUT_data : std_logic_vector(8*128-1 downto 0);
    signal BRAM_FILTER0_data : std_logic_vector(8*128-1 downto 0);
    signal BRAM_FILTER1_data : std_logic_vector(8*128-1 downto 0);
    signal BRAM_FILTER2_data : std_logic_vector(8*128-1 downto 0);
    signal BRAM_FILTER3_data : std_logic_vector(8*128-1 downto 0);
    signal BRAM_OUTPUT_data : std_logic_vector(8*128-1 downto 0);
    
    signal conv_complete : std_logic; -- Reset the convolutional logic, must be set between each convolutional operation
    signal conv_idle : std_logic; -- Reset the convolutional logic, must be set between each convolutional operation
    signal rst : std_logic; -- Reset everything, including BRAM contents
    signal clk : std_logic := '0';
    
    signal TEST_s_index_gen_m_axis_tready : std_logic;
    signal TEST_s_index_gen_m_axis_tdata_input_addr : std_logic_vector(INPUT_ADDR_WIDTH-1 downto 0);
    signal EXPECTED_s_index_gen_m_axis_tdata_input_addr : std_logic_vector(INPUT_ADDR_WIDTH-1 downto 0);
    signal TEST_s_index_gen_m_axis_tdata_filter_addr : std_logic_vector(FILTER_ADDR_WIDTH-1 downto 0);
    signal EXPECTED_s_index_gen_m_axis_tdata_filter_addr : std_logic_vector(FILTER_ADDR_WIDTH-1 downto 0);
    signal TEST_s_index_gen_m_axis_tlast : std_logic;
    signal EXPECTED_s_index_gen_m_axis_tlast : std_logic;
    signal TEST_s_index_gen_m_axis_tvalid : std_logic;    
    signal TEST_s_index_gen_m_axis_fail : std_logic := '0';

    signal TEST_s_mac0_s_axis_tready : std_logic;
    signal TEST_s_mac0_s_axis_tdata : std_logic_vector(MAC_DATA_WIDTH*2-1 downto 0);
    signal EXPECTED_s_mac0_s_axis_tdata : std_logic_vector(MAC_DATA_WIDTH*2-1 downto 0);
    signal TEST_s_mac0_s_axis_tlast : std_logic;
    signal EXPECTED_s_mac0_s_axis_tlast : std_logic;
    signal TEST_s_mac0_s_axis_tvalid : std_logic;
    signal TEST_s_mac0_s_axis_fail : std_logic := '0';
    signal TEST_s_mac1_s_axis_tready : std_logic;
    signal TEST_s_mac1_s_axis_tdata : std_logic_vector(MAC_DATA_WIDTH*2-1 downto 0);
    signal EXPECTED_s_mac1_s_axis_tdata : std_logic_vector(MAC_DATA_WIDTH*2-1 downto 0);
    signal TEST_s_mac1_s_axis_tlast : std_logic;
    signal EXPECTED_s_mac1_s_axis_tlast : std_logic;
    signal TEST_s_mac1_s_axis_tvalid : std_logic;
    signal TEST_s_mac1_s_axis_fail : std_logic := '0';
    signal TEST_s_mac2_s_axis_tready : std_logic;
    signal TEST_s_mac2_s_axis_tdata : std_logic_vector(MAC_DATA_WIDTH*2-1 downto 0);
    signal EXPECTED_s_mac2_s_axis_tdata : std_logic_vector(MAC_DATA_WIDTH*2-1 downto 0);
    signal TEST_s_mac2_s_axis_tlast : std_logic;
    signal EXPECTED_s_mac2_s_axis_tlast : std_logic;
    signal TEST_s_mac2_s_axis_tvalid : std_logic;
    signal TEST_s_mac2_s_axis_fail : std_logic := '0';
    signal TEST_s_mac3_s_axis_tready : std_logic;
    signal TEST_s_mac3_s_axis_tdata : std_logic_vector(MAC_DATA_WIDTH*2-1 downto 0);
    signal EXPECTED_s_mac3_s_axis_tdata : std_logic_vector(MAC_DATA_WIDTH*2-1 downto 0);
    signal TEST_s_mac3_s_axis_tlast : std_logic;
    signal EXPECTED_s_mac3_s_axis_tlast : std_logic;
    signal TEST_s_mac3_s_axis_tvalid : std_logic;
    signal TEST_s_mac3_s_axis_fail : std_logic := '0';

    signal TEST_s_mac0_m_axis_tready : std_logic;
    signal TEST_s_mac0_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal EXPECTED_s_mac0_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal TEST_s_mac0_m_axis_tlast : std_logic;
    signal EXPECTED_s_mac0_m_axis_tlast : std_logic;
    signal TEST_s_mac0_m_axis_tvalid : std_logic;
    signal TEST_s_mac0_m_axis_fail : std_logic := '0';
    signal TEST_s_mac1_m_axis_tready : std_logic;
    signal TEST_s_mac1_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal EXPECTED_s_mac1_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal TEST_s_mac1_m_axis_tlast : std_logic;
    signal EXPECTED_s_mac1_m_axis_tlast : std_logic;
    signal TEST_s_mac1_m_axis_tvalid : std_logic;
    signal TEST_s_mac1_m_axis_fail : std_logic := '0';
    signal TEST_s_mac2_m_axis_tready : std_logic;
    signal TEST_s_mac2_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal EXPECTED_s_mac2_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal TEST_s_mac2_m_axis_tlast : std_logic;
    signal EXPECTED_s_mac2_m_axis_tlast : std_logic;
    signal TEST_s_mac2_m_axis_tvalid : std_logic;
    signal TEST_s_mac2_m_axis_fail : std_logic := '0';
    signal TEST_s_mac3_m_axis_tready : std_logic;
    signal TEST_s_mac3_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal EXPECTED_s_mac3_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal TEST_s_mac3_m_axis_tlast : std_logic;
    signal EXPECTED_s_mac3_m_axis_tlast : std_logic;
    signal TEST_s_mac3_m_axis_tvalid : std_logic;
    signal TEST_s_mac3_m_axis_fail : std_logic := '0';

    signal TEST_s_out_combiner_m_axis_tready : std_logic;
    signal TEST_s_out_combiner_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal EXPECTED_s_out_combiner_m_axis_tdata : std_logic_vector(MAC_OUTPUT_DATA_WIDTH-1 downto 0);
    signal TEST_s_out_combiner_m_axis_tlast : std_logic;
    signal EXPECTED_s_out_combiner_m_axis_tlast : std_logic;
    signal TEST_s_out_combiner_m_axis_tid : std_logic_vector(1 downto 0);
    signal EXPECTED_s_out_combiner_m_axis_tid : std_logic_vector(1 downto 0);
    signal TEST_s_out_combiner_m_axis_tvalid : std_logic;
    signal TEST_s_out_combiner_m_axis_fail : std_logic := '0';

    signal TEST_s_dequantization_m_axis_tready : std_logic;
    signal TEST_s_dequantization_m_axis_tdata : std_logic_vector(MAC_DATA_WIDTH-1 downto 0);
    signal EXPECTED_s_dequantization_m_axis_tdata : std_logic_vector(MAC_DATA_WIDTH-1 downto 0);
    signal TEST_s_dequantization_m_axis_tlast : std_logic;
    signal EXPECTED_s_dequantization_m_axis_tlast : std_logic;
    signal TEST_s_dequantization_m_axis_tid : std_logic_vector(1 downto 0);
    signal EXPECTED_s_dequantization_m_axis_tid : std_logic_vector(1 downto 0);
    signal TEST_s_dequantization_m_axis_tvalid : std_logic;
    signal TEST_s_dequantization_m_axis_fail : std_logic := '0';
begin
        
    BRAM_INPUT_dout <= BRAM_INPUT_dout_delay1; -- BRAM read latency = 2
    process(BRAM_INPUT_clk)
    begin
        if rising_edge(BRAM_INPUT_clk) then
            if (BRAM_INPUT_rst = '1') then
                BRAM_INPUT_dout_delay1 <= (others => '0');
            elsif (BRAM_INPUT_en = '1') then
                BRAM_INPUT_dout_delay1 <= BRAM_INPUT_data((32*(to_integer(unsigned(BRAM_INPUT_addr(32-1 downto 2)))+1))-1 downto (32*(to_integer(unsigned(BRAM_INPUT_addr(32-1 downto 2))))));
            end if;
        end if;
    end process;

    BRAM_FILTER0_dout <= BRAM_FILTER0_dout_delay1; -- BRAM read latency = 2
    process(BRAM_FILTER0_clk)
    begin
        if rising_edge(BRAM_FILTER0_clk) then
            if (BRAM_FILTER0_rst = '1') then
                BRAM_FILTER0_dout_delay1 <= (others => '0');
            elsif (BRAM_FILTER0_en = '1') then
                BRAM_FILTER0_dout_delay1 <= BRAM_FILTER0_data((32*(to_integer(unsigned(BRAM_FILTER0_addr(32-1 downto 2)))+1))-1 downto (32*(to_integer(unsigned(BRAM_FILTER0_addr(32-1 downto 2))))));
            end if;
        end if;
    end process;

    BRAM_FILTER1_dout <= BRAM_FILTER1_dout_delay1; -- BRAM read latency = 2
    process(BRAM_FILTER1_clk)
    begin
        if rising_edge(BRAM_FILTER1_clk) then
            if (BRAM_FILTER1_rst = '1') then
                BRAM_FILTER1_dout_delay1 <= (others => '0');
            elsif (BRAM_FILTER1_en = '1') then
                BRAM_FILTER1_dout_delay1 <= BRAM_FILTER1_data((32*(to_integer(unsigned(BRAM_FILTER1_addr(32-1 downto 2)))+1))-1 downto (32*(to_integer(unsigned(BRAM_FILTER1_addr(32-1 downto 2))))));
            end if;
        end if;
    end process;

    BRAM_FILTER2_dout <= BRAM_FILTER2_dout_delay1; -- BRAM read latency = 2
    process(BRAM_FILTER2_clk)
    begin
        if rising_edge(BRAM_FILTER2_clk) then
            if (BRAM_FILTER2_rst = '1') then
                BRAM_FILTER2_dout_delay1 <= (others => '0');
            elsif (BRAM_FILTER2_en = '1') then
                BRAM_FILTER2_dout_delay1 <= BRAM_FILTER2_data((32*(to_integer(unsigned(BRAM_FILTER2_addr(32-1 downto 2)))+1))-1 downto (32*(to_integer(unsigned(BRAM_FILTER2_addr(32-1 downto 2))))));
            end if;
        end if;
    end process;

    BRAM_FILTER3_dout <= BRAM_FILTER3_dout_delay1; -- BRAM read latency = 2
    process(BRAM_FILTER3_clk)
    begin
        if rising_edge(BRAM_FILTER3_clk) then
            if (BRAM_FILTER3_rst = '1') then
                BRAM_FILTER3_dout_delay1 <= (others => '0');
            elsif (BRAM_FILTER3_en = '1') then
                BRAM_FILTER3_dout_delay1 <= BRAM_FILTER3_data((32*(to_integer(unsigned(BRAM_FILTER3_addr(32-1 downto 2)))+1))-1 downto (32*(to_integer(unsigned(BRAM_FILTER3_addr(32-1 downto 2))))));
            end if;
        end if;
    end process;
       
    BRAM_OUTPUT_dout <= BRAM_OUTPUT_dout_delay1; -- BRAM read latency = 2
    process(BRAM_OUTPUT_clk)
    begin
        if rising_edge(BRAM_OUTPUT_clk) then
            if (BRAM_OUTPUT_rst = '1' or conv_idle = '1') then
                BRAM_OUTPUT_dout_delay1 <= (others => '0');
                BRAM_OUTPUT_data <= (others => '0');
            elsif (BRAM_OUTPUT_en = '1') then
                if (BRAM_OUTPUT_we = "1111") then
                    BRAM_OUTPUT_data((32*(to_integer(unsigned(BRAM_OUTPUT_addr(32-1 downto 2)))+1))-1 downto (32*(to_integer(unsigned(BRAM_OUTPUT_addr(32-1 downto 2)))))) <= BRAM_OUTPUT_din;
                    BRAM_OUTPUT_dout_delay1 <= BRAM_OUTPUT_din;
                else
                    BRAM_OUTPUT_dout_delay1 <= BRAM_OUTPUT_data((32*(to_integer(unsigned(BRAM_OUTPUT_addr(32-1 downto 2)))+1))-1 downto (32*(to_integer(unsigned(BRAM_OUTPUT_addr(32-1 downto 2))))));
                end if;
            end if;
        end if;
    end process;
 

    clk <= not clk after 1ps;

    dut: entity work.conv_accelerator
        generic map(
            DIM_WIDTH => DIM_WIDTH,
            INPUT_ADDR_WIDTH => INPUT_ADDR_WIDTH,
            FILTER_ADDR_WIDTH => FILTER_ADDR_WIDTH,
            OUTPUT_ADDR_WIDTH => OUTPUT_ADDR_WIDTH,
            INPUT_BRAM_ADDR_WIDTH => INPUT_BRAM_ADDR_WIDTH,
            FILTER_BRAM_ADDR_WIDTH => FILTER_BRAM_ADDR_WIDTH,
            OUTPUT_BRAM_ADDR_WIDTH => OUTPUT_BRAM_ADDR_WIDTH,
            BRAM_DATA_WIDTH => BRAM_DATA_WIDTH,
            MAC_DATA_WIDTH => MAC_DATA_WIDTH,
            MAC_OUTPUT_DATA_WIDTH => MAC_OUTPUT_DATA_WIDTH
        )
        port map(
            -- Configuration values from conv_config unit
            max_pooling => max_pooling,
            relu => relu,
            filter_w => filter_w(DIM_WIDTH-1 downto 0),
            filter_h => filter_h(DIM_WIDTH-1 downto 0),
            filter_c => filter_c(DIM_WIDTH-1 downto 0),
            output_w => output_w(DIM_WIDTH-1 downto 0),
            output_h => output_h(DIM_WIDTH-1 downto 0),
            input_end_diff_fw => input_end_diff_fw(INPUT_ADDR_WIDTH-1 downto 0),
            input_end_diff_fh => input_end_diff_fh(INPUT_ADDR_WIDTH-1 downto 0),
            input_end_diff_fc => input_end_diff_fc(INPUT_ADDR_WIDTH-1 downto 0),
            input_end_diff_ow => input_end_diff_ow(INPUT_ADDR_WIDTH-1 downto 0),
            output_elements_per_channel => output_elements_per_channel(OUTPUT_ADDR_WIDTH-1 downto 0),
            output_initial_offset => output_initial_offset(OUTPUT_ADDR_WIDTH-1 downto 0),
            mac0_bias => mac0_bias(MAC_OUTPUT_DATA_WIDTH-1 downto 0),
            mac1_bias => mac1_bias(MAC_OUTPUT_DATA_WIDTH-1 downto 0),
            mac2_bias => mac2_bias(MAC_OUTPUT_DATA_WIDTH-1 downto 0),
            mac3_bias => mac3_bias(MAC_OUTPUT_DATA_WIDTH-1 downto 0),
            q_scale => q_scale(MAC_OUTPUT_DATA_WIDTH-1 downto 0),
            q_zero => q_zero(MAC_DATA_WIDTH-1 downto 0),

            -- BRAM blocks for high speed memory access
            BRAM_INPUT_addr => BRAM_INPUT_addr,
            BRAM_INPUT_din => BRAM_INPUT_din,
            BRAM_INPUT_dout => BRAM_INPUT_dout(BRAM_DATA_WIDTH-1 downto 0),
            BRAM_INPUT_en => BRAM_INPUT_en,
            BRAM_INPUT_we => BRAM_INPUT_we,
            BRAM_INPUT_rst => BRAM_INPUT_rst,
            BRAM_INPUT_clk => BRAM_INPUT_clk,

            BRAM_FILTER0_addr => BRAM_FILTER0_addr,
            BRAM_FILTER0_din => BRAM_FILTER0_din,
            BRAM_FILTER0_dout => BRAM_FILTER0_dout(BRAM_DATA_WIDTH-1 downto 0),
            BRAM_FILTER0_en => BRAM_FILTER0_en,
            BRAM_FILTER0_we => BRAM_FILTER0_we,
            BRAM_FILTER0_rst => BRAM_FILTER0_rst,
            BRAM_FILTER0_clk => BRAM_FILTER0_clk,

            BRAM_FILTER1_addr => BRAM_FILTER1_addr,
            BRAM_FILTER1_din => BRAM_FILTER1_din,
            BRAM_FILTER1_dout => BRAM_FILTER1_dout(BRAM_DATA_WIDTH-1 downto 0),
            BRAM_FILTER1_en => BRAM_FILTER1_en,
            BRAM_FILTER1_we => BRAM_FILTER1_we,
            BRAM_FILTER1_rst => BRAM_FILTER1_rst,
            BRAM_FILTER1_clk => BRAM_FILTER1_clk,

            BRAM_FILTER2_addr => BRAM_FILTER2_addr,
            BRAM_FILTER2_din => BRAM_FILTER2_din,
            BRAM_FILTER2_dout => BRAM_FILTER2_dout(BRAM_DATA_WIDTH-1 downto 0),
            BRAM_FILTER2_en => BRAM_FILTER2_en,
            BRAM_FILTER2_we => BRAM_FILTER2_we,
            BRAM_FILTER2_rst => BRAM_FILTER2_rst,
            BRAM_FILTER2_clk => BRAM_FILTER2_clk,

            BRAM_FILTER3_addr => BRAM_FILTER3_addr,
            BRAM_FILTER3_din => BRAM_FILTER3_din,
            BRAM_FILTER3_dout => BRAM_FILTER3_dout(BRAM_DATA_WIDTH-1 downto 0),
            BRAM_FILTER3_en => BRAM_FILTER3_en,
            BRAM_FILTER3_we => BRAM_FILTER3_we,
            BRAM_FILTER3_rst => BRAM_FILTER3_rst,
            BRAM_FILTER3_clk => BRAM_FILTER3_clk,

            BRAM_OUTPUT_addr => BRAM_OUTPUT_addr,
            BRAM_OUTPUT_din => BRAM_OUTPUT_din,
            BRAM_OUTPUT_dout => BRAM_OUTPUT_dout(BRAM_DATA_WIDTH-1 downto 0),
            BRAM_OUTPUT_en => BRAM_OUTPUT_en,
            BRAM_OUTPUT_we => BRAM_OUTPUT_we,
            BRAM_OUTPUT_rst => BRAM_OUTPUT_rst,
            BRAM_OUTPUT_clk => BRAM_OUTPUT_clk,

            TEST_s_index_gen_m_axis_tready => TEST_s_index_gen_m_axis_tready,
            TEST_s_index_gen_m_axis_tdata_input_addr => TEST_s_index_gen_m_axis_tdata_input_addr,
            TEST_s_index_gen_m_axis_tdata_filter_addr => TEST_s_index_gen_m_axis_tdata_filter_addr,
            TEST_s_index_gen_m_axis_tlast => TEST_s_index_gen_m_axis_tlast,
            TEST_s_index_gen_m_axis_tvalid => TEST_s_index_gen_m_axis_tvalid,

            TEST_s_mac0_s_axis_tready => TEST_s_mac0_s_axis_tready,
            TEST_s_mac0_s_axis_tdata => TEST_s_mac0_s_axis_tdata,
            TEST_s_mac0_s_axis_tlast => TEST_s_mac0_s_axis_tlast,
            TEST_s_mac0_s_axis_tvalid => TEST_s_mac0_s_axis_tvalid,
            TEST_s_mac1_s_axis_tready => TEST_s_mac1_s_axis_tready,
            TEST_s_mac1_s_axis_tdata => TEST_s_mac1_s_axis_tdata,
            TEST_s_mac1_s_axis_tlast => TEST_s_mac1_s_axis_tlast,
            TEST_s_mac1_s_axis_tvalid => TEST_s_mac1_s_axis_tvalid,
            TEST_s_mac2_s_axis_tready => TEST_s_mac2_s_axis_tready,
            TEST_s_mac2_s_axis_tdata => TEST_s_mac2_s_axis_tdata,
            TEST_s_mac2_s_axis_tlast => TEST_s_mac2_s_axis_tlast,
            TEST_s_mac2_s_axis_tvalid => TEST_s_mac2_s_axis_tvalid,
            TEST_s_mac3_s_axis_tready => TEST_s_mac3_s_axis_tready,
            TEST_s_mac3_s_axis_tdata => TEST_s_mac3_s_axis_tdata,
            TEST_s_mac3_s_axis_tlast => TEST_s_mac3_s_axis_tlast,
            TEST_s_mac3_s_axis_tvalid => TEST_s_mac3_s_axis_tvalid,

            TEST_s_mac0_m_axis_tready => TEST_s_mac0_m_axis_tready,
            TEST_s_mac0_m_axis_tdata => TEST_s_mac0_m_axis_tdata,
            TEST_s_mac0_m_axis_tlast => TEST_s_mac0_m_axis_tlast,
            TEST_s_mac0_m_axis_tvalid => TEST_s_mac0_m_axis_tvalid,
            TEST_s_mac1_m_axis_tready => TEST_s_mac1_m_axis_tready,
            TEST_s_mac1_m_axis_tdata => TEST_s_mac1_m_axis_tdata,
            TEST_s_mac1_m_axis_tlast => TEST_s_mac1_m_axis_tlast,
            TEST_s_mac1_m_axis_tvalid => TEST_s_mac1_m_axis_tvalid,
            TEST_s_mac2_m_axis_tready => TEST_s_mac2_m_axis_tready,
            TEST_s_mac2_m_axis_tdata => TEST_s_mac2_m_axis_tdata,
            TEST_s_mac2_m_axis_tlast => TEST_s_mac2_m_axis_tlast,
            TEST_s_mac2_m_axis_tvalid => TEST_s_mac2_m_axis_tvalid,
            TEST_s_mac3_m_axis_tready => TEST_s_mac3_m_axis_tready,
            TEST_s_mac3_m_axis_tdata => TEST_s_mac3_m_axis_tdata,
            TEST_s_mac3_m_axis_tlast => TEST_s_mac3_m_axis_tlast,
            TEST_s_mac3_m_axis_tvalid => TEST_s_mac3_m_axis_tvalid,

            TEST_s_out_combiner_m_axis_tready => TEST_s_out_combiner_m_axis_tready,
            TEST_s_out_combiner_m_axis_tdata => TEST_s_out_combiner_m_axis_tdata,
            TEST_s_out_combiner_m_axis_tlast => TEST_s_out_combiner_m_axis_tlast,
            TEST_s_out_combiner_m_axis_tid => TEST_s_out_combiner_m_axis_tid,
            TEST_s_out_combiner_m_axis_tvalid => TEST_s_out_combiner_m_axis_tvalid,

            TEST_s_dequantization_m_axis_tready => TEST_s_dequantization_m_axis_tready,
            TEST_s_dequantization_m_axis_tdata => TEST_s_dequantization_m_axis_tdata,
            TEST_s_dequantization_m_axis_tlast => TEST_s_dequantization_m_axis_tlast,
            TEST_s_dequantization_m_axis_tid => TEST_s_dequantization_m_axis_tid,
            TEST_s_dequantization_m_axis_tvalid => TEST_s_dequantization_m_axis_tvalid,

            conv_complete => conv_complete,
            conv_idle => conv_idle,
            rst => rst,
            clk => clk
        );

    process begin
        rst <= '1';
        wait for 2ps;
        conv_idle <= '1';
        rst <= '0';
        conv_idle <= '1';
        wait for 10ps;
        BRAM_INPUT_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A50102031500131211100F0E0D0C0B0A09080706050480FF7F";
        BRAM_FILTER0_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A50C0B0A09080706050480FF7F";
        BRAM_FILTER1_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5E8E9EAEBECEDEEEFF0F1F2F3";
        BRAM_FILTER2_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A524232221201F1E1D1C1B1A19";
        BRAM_FILTER3_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5302F2E2D2C2B2A2928272625";
        max_pooling <= '0';
        relu <= '0';
        filter_w <= x"00000003";
        filter_h <= x"00000002";
        filter_c <= x"00000002";
        output_w <= x"00000002";
        output_h <= x"00000002";
        input_end_diff_fw <= x"00000002";
        input_end_diff_fh <= x"00000006";
        input_end_diff_fc <= x"FFFFFFEF";
        input_end_diff_ow <= x"FFFFFFF1";
        output_elements_per_channel <= x"00000004";
        output_initial_offset <= x"00000000";
        mac0_bias <= x"00000000";
        mac1_bias <= x"00000001";
        mac2_bias <= x"00000002";
        mac3_bias <= x"00000003";
        q_scale <= x"04000000";
        q_zero <= x"00000000";
        wait for 10ps;
        conv_idle <= '0';
        wait until rising_edge(conv_complete);
        wait for 10ps;
        conv_idle <= '1';
        wait for 10ps;
        BRAM_INPUT_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A50102031500131211100F0E0D0C0B0A09080706050480FF7F";
        BRAM_FILTER0_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A50C0B0A09080706050480FF7F";
        BRAM_FILTER1_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5E8E9EAEBECEDEEEFF0F1F2F3";
        BRAM_FILTER2_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A524232221201F1E1D1C1B1A19";
        BRAM_FILTER3_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5302F2E2D2C2B2A2928272625";
        max_pooling <= '0';
        relu <= '0';
        filter_w <= x"00000003";
        filter_h <= x"00000002";
        filter_c <= x"00000002";
        output_w <= x"00000002";
        output_h <= x"00000002";
        input_end_diff_fw <= x"00000002";
        input_end_diff_fh <= x"00000006";
        input_end_diff_fc <= x"FFFFFFEF";
        input_end_diff_ow <= x"FFFFFFF1";
        output_elements_per_channel <= x"00000004";
        output_initial_offset <= x"00000000";
        mac0_bias <= x"00000000";
        mac1_bias <= x"00000001";
        mac2_bias <= x"FFFFFFFE";
        mac3_bias <= x"8A32BC81";
        q_scale <= x"7A32BC81";
        q_zero <= x"FFFFFF81";
        wait for 10ps;
        conv_idle <= '0';
        wait until rising_edge(conv_complete);
        wait for 10ps;
        conv_idle <= '1';
        wait for 10ps;
        BRAM_INPUT_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5131211100F0E0D0C0B0A09080706050403020100FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDEC";
        BRAM_FILTER0_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A50C0B0A09080706050480FF7F";
        BRAM_FILTER1_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5E8E9EAEBECEDEEEFF0F1F2F3";
        BRAM_FILTER2_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A524232221201F1E1D1C1B1A19";
        BRAM_FILTER3_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5302F2E2D2C2B2A2928272625";
        max_pooling <= '1';
        relu <= '1';
        filter_w <= x"00000003";
        filter_h <= x"00000002";
        filter_c <= x"00000002";
        output_w <= x"00000002";
        output_h <= x"00000004";
        input_end_diff_fw <= x"00000002";
        input_end_diff_fh <= x"0000000E";
        input_end_diff_fc <= x"FFFFFFE7";
        input_end_diff_ow <= x"FFFFFFE9";
        output_elements_per_channel <= x"00000002";
        output_initial_offset <= x"00000000";
        mac0_bias <= x"00000000";
        mac1_bias <= x"00000001";
        mac2_bias <= x"00000002";
        mac3_bias <= x"00000003";
        q_scale <= x"7A32BC81";
        q_zero <= x"FFFFFF81";
        wait for 10ps;
        conv_idle <= '0';
        wait until rising_edge(conv_complete);
        wait for 10ps;
        conv_idle <= '1';
        wait for 10ps;
        BRAM_INPUT_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A51D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2";
        BRAM_FILTER0_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A50C0B0A09080706050480FF7F";
        BRAM_FILTER1_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5E8E9EAEBECEDEEEFF0F1F2F3";
        BRAM_FILTER2_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A524232221201F1E1D1C1B1A19";
        BRAM_FILTER3_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5302F2E2D2C2B2A2928272625";
        max_pooling <= '1';
        relu <= '1';
        filter_w <= x"00000003";
        filter_h <= x"00000002";
        filter_c <= x"00000002";
        output_w <= x"00000004";
        output_h <= x"00000004";
        input_end_diff_fw <= x"00000004";
        input_end_diff_fh <= x"00000016";
        input_end_diff_fc <= x"FFFFFFDB";
        input_end_diff_ow <= x"FFFFFFDD";
        output_elements_per_channel <= x"00000004";
        output_initial_offset <= x"00000004";
        mac0_bias <= x"00000004";
        mac1_bias <= x"00000005";
        mac2_bias <= x"00000006";
        mac3_bias <= x"00000007";
        q_scale <= x"7A32BC81";
        q_zero <= x"FFFFFF9C";
        wait for 10ps;
        conv_idle <= '0';
        wait until rising_edge(conv_complete);
        wait for 10ps;
        conv_idle <= '1';
        wait for 10ps;
        BRAM_INPUT_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A500000040";
        BRAM_FILTER0_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A500000001";
        BRAM_FILTER1_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A500000001";
        BRAM_FILTER2_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A500000001";
        BRAM_FILTER3_data <= x"A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A500000001";
        max_pooling <= '0';
        relu <= '1';
        filter_w <= x"00000002";
        filter_h <= x"00000002";
        filter_c <= x"00000001";
        output_w <= x"00000001";
        output_h <= x"00000001";
        input_end_diff_fw <= x"00000001";
        input_end_diff_fh <= x"00000001";
        input_end_diff_fc <= x"FFFFFFFE";
        input_end_diff_ow <= x"FFFFFFFF";
        output_elements_per_channel <= x"00000001";
        output_initial_offset <= x"00000000";
        mac0_bias <= x"00000100";
        mac1_bias <= x"00000100";
        mac2_bias <= x"00000100";
        mac3_bias <= x"00000100";
        q_scale <= x"40000000";
        q_zero <= x"00000003";
        wait for 10ps;
        conv_idle <= '0';
        wait until rising_edge(conv_complete);
        wait for 10ps;
        

        assert FALSE Report "Simulation Complete!" severity FAILURE;
    end process;

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_index_gen_m_axis_tdata_input_addr : std_logic_vector(2716-1 downto
        constant EXPECTED_VALUES_s_index_gen_m_axis_tdata_filter_addr : std_logic_vector(2716-1 downto 0) := "0000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000000101100010100001001000100000001110000110000010100001000000011000001000000010000000";
        constant EXPECTED_VALUES_s_index_gen_m_axis_tlast : std_logic_vector(388-1 downto 0) := "1000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000";
    begin
        EXPECTED_s_index_gen_m_axis_tdata_input_addr <= EXPECTED_VALUES_s_index_gen_m_axis_tdata_input_addr((i+1)*7-1 downto i*7);
        EXPECTED_s_index_gen_m_axis_tdata_filter_addr <= EXPECTED_VALUES_s_index_gen_m_axis_tdata_filter_addr((i+1)*7-1 downto i*7);
        EXPECTED_s_index_gen_m_axis_tlast <= EXPECTED_VALUES_s_index_gen_m_axis_tlast(i*1);
        wait until rising_edge(clk) and TEST_s_index_gen_m_axis_tready = '1' and TEST_s_index_gen_m_axis_tvalid = '1';
        assert TEST_s_index_gen_m_axis_tdata_input_addr = EXPECTED_s_index_gen_m_axis_tdata_input_addr report "ASSERTION FAILURE";
        if not (TEST_s_index_gen_m_axis_tdata_input_addr = EXPECTED_s_index_gen_m_axis_tdata_input_addr) then TEST_s_index_gen_m_axis_fail <= 'X'; end if;
        assert TEST_s_index_gen_m_axis_tdata_filter_addr = EXPECTED_s_index_gen_m_axis_tdata_filter_addr report "ASSERTION FAILURE";
        if not (TEST_s_index_gen_m_axis_tdata_filter_addr = EXPECTED_s_index_gen_m_axis_tdata_filter_addr) then TEST_s_index_gen_m_axis_fail <= 'X'; end if;
        assert TEST_s_index_gen_m_axis_tlast = EXPECTED_s_index_gen_m_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_index_gen_m_axis_tlast = EXPECTED_s_index_gen_m_axis_tlast) then TEST_s_index_gen_m_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 388) then
            wait until rising_edge(clk) and TEST_s_index_gen_m_axis_tready = '1' and TEST_s_index_gen_m_axis_tvalid = '1';
            TEST_s_index_gen_m_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_mac0_s_axis_tdata : std_logic_vector(6208-1 downto
        constant EXPECTED_VALUES_s_mac0_s_axis_tlast : std_logic_vector(388-1 downto 0) := "1000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000";
    begin
        EXPECTED_s_mac0_s_axis_tdata <= EXPECTED_VALUES_s_mac0_s_axis_tdata((i+1)*16-1 downto i*16);
        EXPECTED_s_mac0_s_axis_tlast <= EXPECTED_VALUES_s_mac0_s_axis_tlast(i*1);
        wait until rising_edge(clk) and TEST_s_mac0_s_axis_tready = '1' and TEST_s_mac0_s_axis_tvalid = '1';
        assert TEST_s_mac0_s_axis_tdata = EXPECTED_s_mac0_s_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_mac0_s_axis_tdata = EXPECTED_s_mac0_s_axis_tdata) then TEST_s_mac0_s_axis_fail <= 'X'; end if;
        assert TEST_s_mac0_s_axis_tlast = EXPECTED_s_mac0_s_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_mac0_s_axis_tlast = EXPECTED_s_mac0_s_axis_tlast) then TEST_s_mac0_s_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 388) then
            wait until rising_edge(clk) and TEST_s_mac0_s_axis_tready = '1' and TEST_s_mac0_s_axis_tvalid = '1';
            TEST_s_mac0_s_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_mac1_s_axis_tdata : std_logic_vector(6208-1 downto
        constant EXPECTED_VALUES_s_mac1_s_axis_tlast : std_logic_vector(388-1 downto 0) := "1000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000";
    begin
        EXPECTED_s_mac1_s_axis_tdata <= EXPECTED_VALUES_s_mac1_s_axis_tdata((i+1)*16-1 downto i*16);
        EXPECTED_s_mac1_s_axis_tlast <= EXPECTED_VALUES_s_mac1_s_axis_tlast(i*1);
        wait until rising_edge(clk) and TEST_s_mac1_s_axis_tready = '1' and TEST_s_mac1_s_axis_tvalid = '1';
        assert TEST_s_mac1_s_axis_tdata = EXPECTED_s_mac1_s_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_mac1_s_axis_tdata = EXPECTED_s_mac1_s_axis_tdata) then TEST_s_mac1_s_axis_fail <= 'X'; end if;
        assert TEST_s_mac1_s_axis_tlast = EXPECTED_s_mac1_s_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_mac1_s_axis_tlast = EXPECTED_s_mac1_s_axis_tlast) then TEST_s_mac1_s_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 388) then
            wait until rising_edge(clk) and TEST_s_mac1_s_axis_tready = '1' and TEST_s_mac1_s_axis_tvalid = '1';
            TEST_s_mac1_s_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_mac2_s_axis_tdata : std_logic_vector(6208-1 downto
        constant EXPECTED_VALUES_s_mac2_s_axis_tlast : std_logic_vector(388-1 downto 0) := "1000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000";
    begin
        EXPECTED_s_mac2_s_axis_tdata <= EXPECTED_VALUES_s_mac2_s_axis_tdata((i+1)*16-1 downto i*16);
        EXPECTED_s_mac2_s_axis_tlast <= EXPECTED_VALUES_s_mac2_s_axis_tlast(i*1);
        wait until rising_edge(clk) and TEST_s_mac2_s_axis_tready = '1' and TEST_s_mac2_s_axis_tvalid = '1';
        assert TEST_s_mac2_s_axis_tdata = EXPECTED_s_mac2_s_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_mac2_s_axis_tdata = EXPECTED_s_mac2_s_axis_tdata) then TEST_s_mac2_s_axis_fail <= 'X'; end if;
        assert TEST_s_mac2_s_axis_tlast = EXPECTED_s_mac2_s_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_mac2_s_axis_tlast = EXPECTED_s_mac2_s_axis_tlast) then TEST_s_mac2_s_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 388) then
            wait until rising_edge(clk) and TEST_s_mac2_s_axis_tready = '1' and TEST_s_mac2_s_axis_tvalid = '1';
            TEST_s_mac2_s_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_mac3_s_axis_tdata : std_logic_vector(6208-1 downto
        constant EXPECTED_VALUES_s_mac3_s_axis_tlast : std_logic_vector(388-1 downto 0) := "1000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000100000000000";
    begin
        EXPECTED_s_mac3_s_axis_tdata <= EXPECTED_VALUES_s_mac3_s_axis_tdata((i+1)*16-1 downto i*16);
        EXPECTED_s_mac3_s_axis_tlast <= EXPECTED_VALUES_s_mac3_s_axis_tlast(i*1);
        wait until rising_edge(clk) and TEST_s_mac3_s_axis_tready = '1' and TEST_s_mac3_s_axis_tvalid = '1';
        assert TEST_s_mac3_s_axis_tdata = EXPECTED_s_mac3_s_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_mac3_s_axis_tdata = EXPECTED_s_mac3_s_axis_tdata) then TEST_s_mac3_s_axis_fail <= 'X'; end if;
        assert TEST_s_mac3_s_axis_tlast = EXPECTED_s_mac3_s_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_mac3_s_axis_tlast = EXPECTED_s_mac3_s_axis_tlast) then TEST_s_mac3_s_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 388) then
            wait until rising_edge(clk) and TEST_s_mac3_s_axis_tready = '1' and TEST_s_mac3_s_axis_tvalid = '1';
            TEST_s_mac3_s_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_mac0_m_axis_tdata : std_logic_vector(1056-1 downto
        constant EXPECTED_VALUES_s_mac0_m_axis_tlast : std_logic_vector(33-1 downto 0) := "111111111111111111111111111111111";
    begin
        EXPECTED_s_mac0_m_axis_tdata <= EXPECTED_VALUES_s_mac0_m_axis_tdata((i+1)*32-1 downto i*32);
        EXPECTED_s_mac0_m_axis_tlast <= EXPECTED_VALUES_s_mac0_m_axis_tlast(i*1);
        wait until rising_edge(clk) and TEST_s_mac0_m_axis_tready = '1' and TEST_s_mac0_m_axis_tvalid = '1';
        assert TEST_s_mac0_m_axis_tdata = EXPECTED_s_mac0_m_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_mac0_m_axis_tdata = EXPECTED_s_mac0_m_axis_tdata) then TEST_s_mac0_m_axis_fail <= 'X'; end if;
        assert TEST_s_mac0_m_axis_tlast = EXPECTED_s_mac0_m_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_mac0_m_axis_tlast = EXPECTED_s_mac0_m_axis_tlast) then TEST_s_mac0_m_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 33) then
            wait until rising_edge(clk) and TEST_s_mac0_m_axis_tready = '1' and TEST_s_mac0_m_axis_tvalid = '1';
            TEST_s_mac0_m_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_mac1_m_axis_tdata : std_logic_vector(1056-1 downto
        constant EXPECTED_VALUES_s_mac1_m_axis_tlast : std_logic_vector(33-1 downto 0) := "111111111111111111111111111111111";
    begin
        EXPECTED_s_mac1_m_axis_tdata <= EXPECTED_VALUES_s_mac1_m_axis_tdata((i+1)*32-1 downto i*32);
        EXPECTED_s_mac1_m_axis_tlast <= EXPECTED_VALUES_s_mac1_m_axis_tlast(i*1);
        wait until rising_edge(clk) and TEST_s_mac1_m_axis_tready = '1' and TEST_s_mac1_m_axis_tvalid = '1';
        assert TEST_s_mac1_m_axis_tdata = EXPECTED_s_mac1_m_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_mac1_m_axis_tdata = EXPECTED_s_mac1_m_axis_tdata) then TEST_s_mac1_m_axis_fail <= 'X'; end if;
        assert TEST_s_mac1_m_axis_tlast = EXPECTED_s_mac1_m_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_mac1_m_axis_tlast = EXPECTED_s_mac1_m_axis_tlast) then TEST_s_mac1_m_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 33) then
            wait until rising_edge(clk) and TEST_s_mac1_m_axis_tready = '1' and TEST_s_mac1_m_axis_tvalid = '1';
            TEST_s_mac1_m_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_mac2_m_axis_tdata : std_logic_vector(1056-1 downto
        constant EXPECTED_VALUES_s_mac2_m_axis_tlast : std_logic_vector(33-1 downto 0) := "111111111111111111111111111111111";
    begin
        EXPECTED_s_mac2_m_axis_tdata <= EXPECTED_VALUES_s_mac2_m_axis_tdata((i+1)*32-1 downto i*32);
        EXPECTED_s_mac2_m_axis_tlast <= EXPECTED_VALUES_s_mac2_m_axis_tlast(i*1);
        wait until rising_edge(clk) and TEST_s_mac2_m_axis_tready = '1' and TEST_s_mac2_m_axis_tvalid = '1';
        assert TEST_s_mac2_m_axis_tdata = EXPECTED_s_mac2_m_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_mac2_m_axis_tdata = EXPECTED_s_mac2_m_axis_tdata) then TEST_s_mac2_m_axis_fail <= 'X'; end if;
        assert TEST_s_mac2_m_axis_tlast = EXPECTED_s_mac2_m_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_mac2_m_axis_tlast = EXPECTED_s_mac2_m_axis_tlast) then TEST_s_mac2_m_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 33) then
            wait until rising_edge(clk) and TEST_s_mac2_m_axis_tready = '1' and TEST_s_mac2_m_axis_tvalid = '1';
            TEST_s_mac2_m_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_mac3_m_axis_tdata : std_logic_vector(1056-1 downto
        constant EXPECTED_VALUES_s_mac3_m_axis_tlast : std_logic_vector(33-1 downto 0) := "111111111111111111111111111111111";
    begin
        EXPECTED_s_mac3_m_axis_tdata <= EXPECTED_VALUES_s_mac3_m_axis_tdata((i+1)*32-1 downto i*32);
        EXPECTED_s_mac3_m_axis_tlast <= EXPECTED_VALUES_s_mac3_m_axis_tlast(i*1);
        wait until rising_edge(clk) and TEST_s_mac3_m_axis_tready = '1' and TEST_s_mac3_m_axis_tvalid = '1';
        assert TEST_s_mac3_m_axis_tdata = EXPECTED_s_mac3_m_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_mac3_m_axis_tdata = EXPECTED_s_mac3_m_axis_tdata) then TEST_s_mac3_m_axis_fail <= 'X'; end if;
        assert TEST_s_mac3_m_axis_tlast = EXPECTED_s_mac3_m_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_mac3_m_axis_tlast = EXPECTED_s_mac3_m_axis_tlast) then TEST_s_mac3_m_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 33) then
            wait until rising_edge(clk) and TEST_s_mac3_m_axis_tready = '1' and TEST_s_mac3_m_axis_tvalid = '1';
            TEST_s_mac3_m_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_out_combiner_m_axis_tdata : std_logic_vector(4224-1 downto
        constant EXPECTED_VALUES_s_out_combiner_m_axis_tlast : std_logic_vector(132-1 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
        constant EXPECTED_VALUES_s_out_combiner_m_axis_tid : std_logic_vector(264-1 downto 0) := "111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100";
    begin
        EXPECTED_s_out_combiner_m_axis_tdata <= EXPECTED_VALUES_s_out_combiner_m_axis_tdata((i+1)*32-1 downto i*32);
        EXPECTED_s_out_combiner_m_axis_tlast <= EXPECTED_VALUES_s_out_combiner_m_axis_tlast(i*1);
        EXPECTED_s_out_combiner_m_axis_tid <= EXPECTED_VALUES_s_out_combiner_m_axis_tid((i+1)*2-1 downto i*2);
        wait until rising_edge(clk) and TEST_s_out_combiner_m_axis_tready = '1' and TEST_s_out_combiner_m_axis_tvalid = '1';
        assert TEST_s_out_combiner_m_axis_tdata = EXPECTED_s_out_combiner_m_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_out_combiner_m_axis_tdata = EXPECTED_s_out_combiner_m_axis_tdata) then TEST_s_out_combiner_m_axis_fail <= 'X'; end if;
        assert TEST_s_out_combiner_m_axis_tlast = EXPECTED_s_out_combiner_m_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_out_combiner_m_axis_tlast = EXPECTED_s_out_combiner_m_axis_tlast) then TEST_s_out_combiner_m_axis_fail <= 'X'; end if;
        assert TEST_s_out_combiner_m_axis_tid = EXPECTED_s_out_combiner_m_axis_tid report "ASSERTION FAILURE";
        if not (TEST_s_out_combiner_m_axis_tid = EXPECTED_s_out_combiner_m_axis_tid) then TEST_s_out_combiner_m_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 132) then
            wait until rising_edge(clk) and TEST_s_out_combiner_m_axis_tready = '1' and TEST_s_out_combiner_m_axis_tvalid = '1';
            TEST_s_out_combiner_m_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_s_dequantization_m_axis_tdata : std_logic_vector(1056-1 downto
        constant EXPECTED_VALUES_s_dequantization_m_axis_tlast : std_logic_vector(132-1 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
        constant EXPECTED_VALUES_s_dequantization_m_axis_tid : std_logic_vector(264-1 downto 0) := "111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100111001001110010011100100";
    begin
        EXPECTED_s_dequantization_m_axis_tdata <= EXPECTED_VALUES_s_dequantization_m_axis_tdata((i+1)*8-1 downto i*8);
        EXPECTED_s_dequantization_m_axis_tlast <= EXPECTED_VALUES_s_dequantization_m_axis_tlast(i*1);
        EXPECTED_s_dequantization_m_axis_tid <= EXPECTED_VALUES_s_dequantization_m_axis_tid((i+1)*2-1 downto i*2);
        wait until rising_edge(clk) and TEST_s_dequantization_m_axis_tready = '1' and TEST_s_dequantization_m_axis_tvalid = '1';
        assert TEST_s_dequantization_m_axis_tdata = EXPECTED_s_dequantization_m_axis_tdata report "ASSERTION FAILURE";
        if not (TEST_s_dequantization_m_axis_tdata = EXPECTED_s_dequantization_m_axis_tdata) then TEST_s_dequantization_m_axis_fail <= 'X'; end if;
        assert TEST_s_dequantization_m_axis_tlast = EXPECTED_s_dequantization_m_axis_tlast report "ASSERTION FAILURE";
        if not (TEST_s_dequantization_m_axis_tlast = EXPECTED_s_dequantization_m_axis_tlast) then TEST_s_dequantization_m_axis_fail <= 'X'; end if;
        assert TEST_s_dequantization_m_axis_tid = EXPECTED_s_dequantization_m_axis_tid report "ASSERTION FAILURE";
        if not (TEST_s_dequantization_m_axis_tid = EXPECTED_s_dequantization_m_axis_tid) then TEST_s_dequantization_m_axis_fail <= 'X'; end if;
        i := i + 1;
        if (i = 132) then
            wait until rising_edge(clk) and TEST_s_dequantization_m_axis_tready = '1' and TEST_s_dequantization_m_axis_tvalid = '1';
            TEST_s_dequantization_m_axis_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

    process
        variable i : integer := 0;
        constant EXPECTED_VALUES_BRAM_OUTPUT_addr : std_logic_vector(4224-1 downto
        constant EXPECTED_VALUES_BRAM_OUTPUT_din : std_logic_vector(4224-1 downto
    begin
        EXPECTED_BRAM_OUTPUT_addr <= EXPECTED_VALUES_BRAM_OUTPUT_addr((i+1)*32-1 downto i*32);
        EXPECTED_BRAM_OUTPUT_din <= EXPECTED_VALUES_BRAM_OUTPUT_din((i+1)*32-1 downto i*32);
        wait until rising_edge(clk) and BRAM_OUTPUT_en = '1' and BRAM_OUTPUT_we = "1111";
        assert BRAM_OUTPUT_addr = EXPECTED_BRAM_OUTPUT_addr report "ASSERTION FAILURE";
        if not (BRAM_OUTPUT_addr = EXPECTED_BRAM_OUTPUT_addr) then BRAM_OUTPUT_fail <= 'X'; end if;
        assert BRAM_OUTPUT_din = EXPECTED_BRAM_OUTPUT_din report "ASSERTION FAILURE";
        if not (BRAM_OUTPUT_din = EXPECTED_BRAM_OUTPUT_din) then BRAM_OUTPUT_fail <= 'X'; end if;
        i := i + 1;
        if (i = 132) then
            wait until rising_edge(clk) and BRAM_OUTPUT_en = '1' and BRAM_OUTPUT_we = "1111";
            BRAM_OUTPUT_fail <= 'X';
            assert FALSE report "TOO MANY TRANSACTIONS!!!";
        end if;
    end process;
    

end Behavioral;

